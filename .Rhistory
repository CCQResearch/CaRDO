devtools::build()
create_dashboard()
devtools::build()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
remotes::install_local("K:/EPI/R-Shiny Projects/CanDOR/Testing/CanDOR_9.9.9.tar.gz")
CanDOR::create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard(0)
create_dashboard(\)
create_dashboard()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
create_dashboard()
source("K:/EPI/R-Shiny Projects/CanDOR/Testing/Testing Development/R/all_func.R", echo=TRUE)
create_dashboard()
source("K:/EPI/R-Shiny Projects/CanDOR/Testing/Testing Development/R/all_func.R", echo=TRUE)
create.post()
create_dashboard()
out$message
View(data_inc)
View(tmp)
data_inc$cancer.type <- as.character(data_inc$cancer.type)
View(data_inc)
View(data_inc)
source("K:/EPI/R-Shiny Projects/CanDOR/Testing/Testing Development/R/all_func.R", echo=TRUE)
create_dashboard()
runApp('Shiny App')
create_dashboard()
create_dashboard()
source("K:/EPI/R-Shiny Projects/CanDOR/Testing/Testing Development/R/all_func.R", echo=TRUE)
create_dashboard()
runApp('Shiny App')
devtools::build()
create_dashboard()
runApp('Shiny App')
source("K:/EPI/R-Shiny Projects/CanDOR/Testing/Testing Development/R/all_func.R", echo=TRUE)
create_dashboard()
View(data_inc)
View(data_inc)
View(data_mrt)
View(data_pop)
cols_pop <- c("year", "sex", "age.grp",
#"geog.loc",
"population")
names(cols_pop) <- c(input$var_select_pop_year,
input$var_select_pop_sex,
input$var_select_pop_age.group,
#ifelse(is.null(input$var_select_pop_geog.loc), "NA", input$var_select_pop_geog.loc),
input$var_select_pop_population)
cols_pop <- cols_pop[names(cols_pop) != "NA"]
data_pop <- data_population() %>%
select(all_of(names(cols_pop)))
names(data_pop)[names(data_pop) %in% names(cols_pop)] <- cols_pop
source("K:/EPI/R-Shiny Projects/CanDOR/Testing/Testing Development/R/all_func.R", echo=TRUE)
create_dashboard()
View(data_mrt)
View(data_pop)
View(data_pop)
input$bool_all_canc
input$all_canc_name
View(supplied_params)
View(data_inc)
View(data_inc_annual)
suppress_threshold
View(data_inc_age)
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
runApp('Shiny App')
devtools::build()
create_dashboard()
runApp('Shiny App')
create_dashboard()
devtools::build()
create_dashboard()
confirmSweetAlert(
type = NULL,
inputId = "confirm",
title = "Congratulations! Your Shiny app can be found below.",
text = tagList(
div(
class = "directory-copy",
file.path(getwd(), "Shiny App"),
rclipButton(
inputId = "clipbtn",
label = "Copy to clipboard",
clipText = file.path(getwd(), "Shiny App"),
icon = icon("clipboard")
)
)
),
btn_labels = c("Redo", "Exit")
)
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
create_dashboard()
create_dashboard()
create_dashboard()
devtools::build()
create_dashboard()
devtools::build()
create_dashboard()
runApp('Shiny App')
devtools::build()
create_dashboard()
runApp('Shiny App')
runApp('Shiny App')
runApp('Shiny App')
View(data_topright()
)
data_topright <- reactive({
inc_annual_counts %>%
filter(cancer.type == input$cancer.type,
measure == input$measure)
# %>%
#   pivot_wider(names_from = 'sex', values_from = 'obs')
})
View(data_topright())
unique(data_topright()$sex)
sex_num = unique(data_topright()$sex)[1]
sex_num
data_topright() %>% filter(sex == sex_num)
sex_name[[sex_num]]
line_styles[[sex_num]]
runApp('Shiny App')
runApp('Shiny App')
runApp('Shiny App')
runApp('Shiny App')
runApp('Shiny App')
devtools::build()
create_dashboard()
runApp('Shiny App')
runApp('Shiny App')
rates_limit
if(length(measure_choices) != 1){
inc_annual_counts %>%
filter(cancer.type != "All cancers",
sex == 3,
measure == "Rates") %>%
pull(obs) %>%
max()
} else {
NULL
}
# Let's now load in the required packages
library(shiny)
library(bslib)
library(shinyWidgets)
library(tidyverse)
library(plotly)
library(markdown)
# Then we will "source", or load in the modules
# source("K:/EPI/R-Shiny Projects/CanDOR/Testing/Testing Development/inst/extdata/app_files/module.R", local = TRUE)
# source("K:/EPI/R-Shiny Projects/CanDOR/Testing/Testing Development/inst/extdata/app_files/load_data.R", local = TRUE)
source("module.R", local = TRUE)
getwd()
setwd("K:/EPI/R-Shiny Projects/CaRDO/Testing/Testing Development/Shiny App")
# Let's now load in the required packages
library(shiny)
library(bslib)
library(shinyWidgets)
library(tidyverse)
library(plotly)
library(markdown)
# Then we will "source", or load in the modules
# source("K:/EPI/R-Shiny Projects/CanDOR/Testing/Testing Development/inst/extdata/app_files/module.R", local = TRUE)
# source("K:/EPI/R-Shiny Projects/CanDOR/Testing/Testing Development/inst/extdata/app_files/load_data.R", local = TRUE)
source("module.R", local = TRUE)
source("load_data.R", local = TRUE)
rates_limit
counts_limit
inc_counts %>%
filter(cancer.type != "All cancers",
sex == 3,
measure == "Counts") %>%
pull(obs) %>%
max()
counts_limit <- inc_counts %>%
filter(cancer.type != "All cancers",
sex == 3,
measure == "Counts") %>%
pull(obs) %>%
max(., na.rm = TRUE)
counts_limit
runApp()
devtools::build()
create_dashboard()
runApp('Shiny App')
